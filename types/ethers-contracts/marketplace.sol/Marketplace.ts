/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MarketplaceInterface extends Interface {
    getFunction(nameOrSignature: "buyNFT" | "cancel" | "listNFT" | "listings"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Cancel" | "ListingCreated" | "Sale"): EventFragment;

    encodeFunctionData(functionFragment: 'buyNFT', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'cancel', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'listNFT', values: [AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'listings', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'buyNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'listNFT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'listings', data: BytesLike): Result;
  }

  
    export namespace CancelEvent {
      export type InputTuple = [ListingId: BigNumberish, tokenId: BigNumberish, seller: AddressLike];
      export type OutputTuple = [ListingId: bigint, tokenId: bigint, seller: string];
      export interface OutputObject {ListingId: bigint, tokenId: bigint, seller: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ListingCreatedEvent {
      export type InputTuple = [listingId: BigNumberish, seller: AddressLike, tokenId: BigNumberish, nftContract: AddressLike, price: BigNumberish];
      export type OutputTuple = [listingId: bigint, seller: string, tokenId: bigint, nftContract: string, price: bigint];
      export interface OutputObject {listingId: bigint, seller: string, tokenId: bigint, nftContract: string, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace SaleEvent {
      export type InputTuple = [listingId: BigNumberish, buyer: AddressLike, tokenId: BigNumberish];
      export type OutputTuple = [listingId: bigint, buyer: string, tokenId: bigint];
      export interface OutputObject {listingId: bigint, buyer: string, tokenId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Marketplace extends BaseContract {
    
    connect(runner?: ContractRunner | null): Marketplace;
    waitForDeployment(): Promise<this>;

    interface: MarketplaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    buyNFT: TypedContractMethod<
      [listingId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    cancel: TypedContractMethod<
      [listedId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    listNFT: TypedContractMethod<
      [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    listings: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, bigint, boolean] & {nftAddress: string, seller: string, tokenId: bigint, price: bigint, active: boolean }],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'buyNFT'): TypedContractMethod<
      [listingId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'cancel'): TypedContractMethod<
      [listedId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'listNFT'): TypedContractMethod<
      [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'listings'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, bigint, boolean] & {nftAddress: string, seller: string, tokenId: bigint, price: bigint, active: boolean }],
      'view'
    >;

    getEvent(key: 'Cancel'): TypedContractEvent<CancelEvent.InputTuple, CancelEvent.OutputTuple, CancelEvent.OutputObject>;
getEvent(key: 'ListingCreated'): TypedContractEvent<ListingCreatedEvent.InputTuple, ListingCreatedEvent.OutputTuple, ListingCreatedEvent.OutputObject>;
getEvent(key: 'Sale'): TypedContractEvent<SaleEvent.InputTuple, SaleEvent.OutputTuple, SaleEvent.OutputObject>;

    filters: {
      
      'Cancel(uint256,uint256,address)': TypedContractEvent<CancelEvent.InputTuple, CancelEvent.OutputTuple, CancelEvent.OutputObject>;
      Cancel: TypedContractEvent<CancelEvent.InputTuple, CancelEvent.OutputTuple, CancelEvent.OutputObject>;
    

      'ListingCreated(uint256,address,uint256,address,uint256)': TypedContractEvent<ListingCreatedEvent.InputTuple, ListingCreatedEvent.OutputTuple, ListingCreatedEvent.OutputObject>;
      ListingCreated: TypedContractEvent<ListingCreatedEvent.InputTuple, ListingCreatedEvent.OutputTuple, ListingCreatedEvent.OutputObject>;
    

      'Sale(uint256,address,uint256)': TypedContractEvent<SaleEvent.InputTuple, SaleEvent.OutputTuple, SaleEvent.OutputObject>;
      Sale: TypedContractEvent<SaleEvent.InputTuple, SaleEvent.OutputTuple, SaleEvent.OutputObject>;
    
    };
  }